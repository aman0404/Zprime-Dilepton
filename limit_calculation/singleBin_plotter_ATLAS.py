#/usr/bin/env python
import os
import sys
sys.path.append('cfgs/')
from copy import deepcopy
import numpy as np
import numpy
import math
import ROOT
from ROOT import TCanvas,TGraphAsymmErrors,TFile,TH1D,TH1F,TGraph,TGraphErrors,gStyle,TLegend,TLine,TGraphSmooth,TPaveText,TGraphAsymmErrors,TPaveLabel,gROOT, TF1
import array
import argparse

# Create ArgumentParser object
parser = argparse.ArgumentParser(description='Plotting limits as a function of mass threshold.')

parser.add_argument("--mumu",dest="mumu",action="store_true",default=False, help="plot mumu")
parser.add_argument("--ee",dest="ee",action="store_true",default=False, help="plot ee")

parser.add_argument("--0b",dest="plot_0b",action="store_true",default=False, help="plot 0b")
parser.add_argument("--1b",dest="plot_1b",action="store_true",default=False, help="plot 1b")

args = parser.parse_args()

ROOT.gROOT.SetBatch(True)


def printPlots(canvas,name):
        canvas.Print('plots/'+name+".png","png")
        canvas.Print('plots/'+name+".pdf","pdf")
        canvas.SaveSource('plots/'+name+".C","cxx")
        canvas.Print('plots/'+name+".root","root")
        canvas.Print('plots/'+name+".eps","eps")

printStats = False

X = numpy.arange(400, 1650, 50)
#X = numpy.arange(400, 1900, 50)
#X = numpy.arange(400, 1950, 50)
if args.mumu:
    if args.plot_1b:
       ##1b curve
       Xcurve_2TeV = [0.16809459875648497, 0.1639758655424091, 0.15435285334374393, 0.16068655227746118, 0.16640806568554053, 0.16925654140871163, 0.17005578570158275, 0.16641265938026054, 0.15790963224007473, 0.1457998739885879, 0.13112340991740187, 0.11420232403045835, 0.09645895530504418, 0.09699045585967699, 0.09646774887101056, 0.09659429735457002, 0.09448775540099644, 0.09245098436354944, 0.09139998018611085, 0.09038043404862417, 0.08839895059687473, 0.08543880001378625, 0.08256938742203551, 0.07886942235585119, 0.07249231133897056, 0.06909681525520535, 0.06442666556068043, 0.055366539466823975, 0.046353111457599766, 0.03841698591665625, 0.031712374327320755] 
       #[0.19980572000000002, 0.19687481, 0.1939439, 0.19101299, 0.18808208, 0.18515117, 0.18222026000000002, 0.17928935000000001, 0.17635844, 0.17342753, 0.17049662000000002, 0.16756571, 0.1646348, 0.16170389000000002, 0.15877298, 0.15584207, 0.15291116, 0.14998025, 0.14704934, 0.14411843000000002, 0.14118752, 0.13825661, 0.1353257, 0.13239479, 0.12946388, 0.12653297000000002, 0.12360206, 0.12067115, 0.11774024000000001, 0.11480933, 0.11187842] 
       #[0.2818157668669952, 0.26336027727406613, 0.2446976205233565, 0.225861081673273, 0.20565277441454174, 0.18759605761466308, 0.16969159704472023, 0.15336727909441905, 0.13780150685168002, 0.12393733839785769, 0.1098846437913727, 0.1098846437913727, 0.08772732402854522, 0.07832323565697345, 0.06995400661853507, 0.06247425081007511, 0.0554592606538102, 0.0489722085386291, 0.04363652312107532, 0.04363652312107532, 0.034824886968201275, 0.03099727504863523, 0.027720623233805603, 0.024421588674029614, 0.021944981728046827, 0.019346862807313916, 0.019346862807313916, 0.01531305109692932, 0.013556205732162596, 0.011925527282861127, 0.010571655236920607]
       Xcurve_1TeV = [2.633593039214967, 2.5823327962730023, 2.4506238615694844, 2.545379950999166, 2.60067569935283, 2.628195452933164, 2.5992551736264837, 2.5439925014811897, 2.4979328779783896, 2.328410673253277, 2.0631860106166395, 1.8139559790458304, 1.4845231740771214, 1.4849500521500958, 1.4914183920720294, 1.4929617287875487, 1.4563284965070444, 1.4143326383684627, 1.37810376783589, 1.3278602802931458, 1.3020545668832795, 1.2539569058038214, 1.1966964368482444, 1.1222794650009529, 1.0892657920928446, 1.0238982785417836, 0.9337670297537992, 0.8478149760464463, 0.7347902249090789, 0.6111366256019422, 0.4593525999155924] 
       #[3.2972099999999998, 3.2379425, 3.178675, 3.1194075, 3.06014, 3.0008725, 2.941605, 2.8823375, 2.82307, 2.7638024999999997, 2.704535, 2.6452675, 2.5860000000000003, 2.5267325, 2.467465, 2.4081975, 2.34893, 2.2896625000000004, 2.230395, 2.1711275, 2.11186, 2.0525925000000003, 1.993325, 1.9340575, 1.87479, 1.8155225000000002, 1.756255, 1.6969875, 1.6377200000000003, 1.5784525, 1.5191850000000002]
 
       #[4.522002176902895, 4.226355608783608, 3.9008901095337, 3.603051239831862, 3.2662598784170704, 2.96855128160398, 2.7036651185040346, 2.435771054560705, 2.1823391929133478, 1.953064454237746, 1.7530913459012007, 1.7530913459012007, 1.3959800743967203, 1.2417565421306807, 1.095616458262088, 0.9827726909166329, 0.8725382451645891, 0.7636347852077114, 0.6771235486208386, 0.6771235486208386, 0.5389669710506315, 0.483607456677607, 0.4283395391346172, 0.37954813328061787, 0.34049184509669317, 0.3008078927566508, 0.3008078927566508, 0.23787873750055924, 0.21108351860696906, 0.18581104216718972, 0.16607409952191887]
    if args.plot_0b:
        ##0b curve
        Xcurve_2TeV = [1.6994881761896063, 1.5221954227937955, 1.3109850287931921, 1.2734540640943937, 1.225610039065588, 1.1742720130156714, 1.1087294194941892, 1.0307249254979458, 0.954650345921768, 0.8665616337913068, 0.7623673048194397, 0.6481414494471606, 0.5374651593038351, 0.5312680429243126, 0.5252671481530345, 0.5153854177937828, 0.5092650695873565, 0.49873139811113837, 0.4869446903679044, 0.4731314099826414, 0.4577346812143468, 0.4407778753365386, 0.42040950425683493, 0.3983371454043657, 0.3781747617879803, 0.34778723077092405, 0.3135475301886999, 0.28662912426234693, 0.24726043067186082, 0.207895230213145, 0.1613063675158075] 
        #[2.211708, 2.147839, 2.08397, 2.020101, 1.956232, 1.8923629999999998, 1.8284939999999998, 1.7646249999999997, 1.7007559999999997, 1.6368869999999998, 1.5730179999999998, 1.5091489999999999, 1.44528, 1.3814109999999997, 1.3175419999999998, 1.2536729999999998, 1.1898039999999999, 1.1259349999999997, 1.0620659999999997, 0.9981969999999998, 0.9343279999999998, 0.8704589999999999, 0.8065899999999997, 0.7427209999999997, 0.6788519999999996, 0.6149829999999996, 0.5511139999999997, 0.4872449999999997, 0.42337599999999975, 0.3595069999999998, 0.29563799999999985] 
        #[2.392026843510952, 2.0898958010552287, 1.8298064955281743, 1.6071447509743222, 1.4063328599087324, 1.238125620998523, 1.0882738986828853, 0.9590009300015376, 0.8468207063528855, 0.7469344753757083, 0.6621037517751303, 0.6621037517751303, 0.5142095445928541, 0.45517464695252, 0.40465259672913706, 0.3580418159079362, 0.31901238271261434, 0.28362758087255285, 0.2517111327533805, 0.2517111327533805, 0.19966307373201939, 0.17746695795809672, 0.15843797317535424, 0.14073505189907726, 0.12516999345162155, 0.11106906083452939, 0.11106906083452939, 0.0878944785014909, 0.07830070441659732, 0.06959837353515191, 0.06176864425855008]
        Xcurve_1TeV = [27.49937175545837, 24.56250625987891, 21.074402308713296, 20.44011878465627, 19.689924062839157, 18.83590695554756, 17.838047234207046, 16.649242415799495, 15.230550380297272, 13.764419448513115, 12.097741973310502, 10.211249004416546, 8.587929809121736, 8.489116897079777, 8.385221533214306, 8.245794860228514, 8.127934065933134, 7.966203599168566, 7.780107584781869, 7.586340015238943, 7.352519401806337, 7.066172633279394, 6.734317566299659, 6.4064842382041665, 5.970765308649481, 5.565490628410665, 5.140236105391197, 4.565344233098356, 4.027128345342148, 3.312705915490601, 2.6405445037509025]
 
        #[38.42920096269565, 33.61246347789884, 29.35697700027334, 25.722951208040854, 22.533450251982558, 19.81610041614706, 17.418431185301724, 15.30008670570886, 13.493848700397756, 11.897480452658426, 10.460379533254347, 10.460379533254347, 8.223696223941309, 7.298440849234743, 6.464685292008248, 5.744428237748958, 5.091077788304025, 4.512897245337869, 4.016960884890679, 4.016960884890679, 3.1795819176315696, 2.8347978663033953, 2.5175036558323742, 2.2414240042654847, 1.9960838487532366, 1.7785741285806747, 1.7785741285806747, 1.4158310672737922, 1.2588786327334742, 1.1231959440916557, 0.9991983360290727]

if args.ee:
    if args.plot_0b:
        Xcurve_1TeV = [8.727585898205614, 7.6424316049028995, 6.422358762627812, 6.163160710347963, 5.79250622117803, 5.42664592287543, 5.054802124425725, 4.712045026371488, 4.286812599577344, 3.777968694667736, 3.357495611861506, 2.8674120322729375, 2.2569394090188943, 2.185558303961415, 2.140785513352345, 2.0862620981698567, 2.0058360461747893, 1.9367772906443776, 1.904134079557027, 1.8418091400214163, 1.7714636471583614, 1.6862565839163826, 1.5793570380445154, 1.4992619950645194, 1.385221670371784, 1.2502099391114312, 1.0889693088368535, 0.9613784193740678, 0.8565019992446291, 0.6973529313963813, 0.533258764805493]
 
        #[10.160992, 9.851166, 9.54134, 9.231514, 8.921688, 8.611862, 8.302036000000001, 7.99221, 7.682384, 7.372558, 7.0627320000000005, 6.752906, 6.44308, 6.133254, 5.823428, 5.513602000000001, 5.203776, 4.89395, 4.584124000000001, 4.274298, 3.9644720000000007, 3.6546459999999996, 3.3448200000000003, 3.034994000000001, 2.725168, 2.4153420000000008, 2.1055159999999997, 1.7956900000000005, 1.4858640000000012, 1.1760380000000001, 0.8662120000000009]
 
        #[34.98238595377242, 30.426345098596695, 26.61825589062694, 23.39488689817941, 20.510147497500387, 18.06727487176457, 15.861905020733024, 13.940127989864507, 12.263968777734119, 10.848963512095104, 9.610737197326863, 9.610737197326863, 7.5148006594023995, 6.679115485644744, 5.927689659137071, 5.270068091013285, 4.688451383318907, 4.17854073228601, 3.7055528147339594, 3.7055528147339594, 2.9401564747600855, 2.612377858754812, 2.3238785082060316, 2.0748400088438617, 1.8484085802266481, 1.637723627954618, 1.637723627954618, 1.3005018909121882, 1.1504803787022326, 1.0254422961798926, 0.9224690898753767]
        Xcurve_2TeV = [0.5312106929150392, 0.47124034286528427, 0.40140982010912707, 0.38042685859438424, 0.3633591972270174, 0.3410008742715389, 0.31914231969849777, 0.2963328799500774, 0.2738479047743131, 0.24485987697486888, 0.21061074228256096, 0.17539702566130377, 0.1450795112886268, 0.14154007031515087, 0.13806695125414467, 0.13425475672065598, 0.1315543004947497, 0.12692269511522897, 0.12123387672666278, 0.11564866899952579, 0.11249331059564313, 0.10542173708920194, 0.10110733707090053, 0.09366647955718974, 0.0892732126134768, 0.08192150524823608, 0.07939588891780545, 0.06824977974524354, 0.05497350386069014, 0.047052972424617985, 0.03728036082035]
 
        #[0.704102, 0.682175, 0.6602480000000001, 0.638321, 0.616394, 0.5944670000000001, 0.57254, 0.550613, 0.528686, 0.506759, 0.484832, 0.462905, 0.44097800000000004, 0.419051, 0.39712400000000003, 0.375197, 0.35327, 0.33134300000000005, 0.309416, 0.287489, 0.26556199999999996, 0.24363500000000005, 0.22170800000000002, 0.199781, 0.17785399999999996, 0.15592700000000004, 0.134, 0.11207299999999998, 0.09014599999999995, 0.06821900000000003, 0.046292]
        #[2.169897292961574, 1.895825129442437, 1.6581092385786622, 1.4582468838444036, 1.281980991438341, 1.1272533157968294, 0.99252333248438, 0.8777954876606598, 0.7751728297013345, 0.683803754060938, 0.6056374063207562, 0.6056374063207562, 0.47828743371311977, 0.4253245969076882, 0.37845957865519975, 0.3365992409497843, 0.29894645859975466, 0.2651536120022167, 0.23515241617648602, 0.23515241617648602, 0.1859127597330257, 0.16595515810678005, 0.14746651121760126, 0.13058147644155427, 0.11543402668238263, 0.10254368949272555, 0.10254368949272555, 0.08140239622592524, 0.0723377704911223, 0.06424108885895763, 0.05674499566521785]

    if args.plot_1b:
        Xcurve_1TeV = [1.3670287288618992, 1.3170139682149355, 1.2613328645632036, 1.2943294572272661, 1.3093070440526684, 1.2840626239151305, 1.2370535119028696, 1.2321784361696466, 1.1816895115855068, 1.0648813833829438, 0.9394411225556375, 0.7905879916643347, 0.6623351897455545, 0.6485495512848644, 0.645606667438965, 0.636507168335595, 0.6234169640802104, 0.6055984349091362, 0.5770057353024904, 0.5514956487453961, 0.5172265415805962, 0.49228810279032215, 0.474767580968455, 0.45390879565312753, 0.4166021128808519, 0.3900128775132947, 0.34565421647887634, 0.328273652009975, 0.28641868383938845, 0.24203741600435832, 0.17426450321729361]
 
        #[1.7178879999999999, 1.6797714999999998, 1.6416549999999999, 1.6035385, 1.5654219999999999, 1.5273054999999998, 1.4891889999999999, 1.4510725, 1.4129559999999999, 1.3748394999999998, 1.3367229999999999, 1.2986065, 1.2604899999999999, 1.2223734999999998, 1.184257, 1.1461405, 1.108024, 1.0699074999999998, 1.031791, 0.9936744999999998, 0.9555579999999999, 0.9174414999999998, 0.8793249999999999, 0.8412084999999998, 0.8030919999999999, 0.7649754999999998, 0.7268589999999999, 0.6887424999999998, 0.6506259999999999, 0.6125094999999998, 0.5743929999999999] 
        #[4.219789738995547, 3.872861812454726, 3.561327427437687, 3.250391691442393, 2.94224805998195, 2.6606532813933303, 2.4058273108747263, 2.151070438841756, 1.9114632135250722, 1.7158597106095272, 1.5167572199835517, 1.5167572199835517, 1.205906119775397, 1.0736071727407566, 0.9544759144400784, 0.8460923618167279, 0.7577147676319997, 0.6723687035275011, 0.5960971290305752, 0.5960971290305752, 0.4735177562300859, 0.4184485451548399, 0.3735649537502464, 0.3326041031134476, 0.29728013327930863, 0.26160269767928096, 0.26160269767928096, 0.20476248148550796, 0.18390444101350192, 0.1633895533239232, 0.14515506003928152]
        Xcurve_2TeV = [0.08726889889680924, 0.08604607641950866, 0.08017284283039028, 0.08084116871953657, 0.08146782344811548, 0.08296463388796066, 0.08004659436839863, 0.07646628487994721, 0.07363299604881063, 0.06788782891115519, 0.061332287085304645, 0.051179474917356534, 0.04435984254082555, 0.04489426539061414, 0.04381008742680377, 0.0443122637370464, 0.043438875852221, 0.04299140652610436, 0.042904746069648704, 0.041015418465862354, 0.038367174030528924, 0.03614530328994127, 0.035010582188458275, 0.03248337505847516, 0.030748135969808132, 0.02884556088565778, 0.0269753335397388, 0.0233231001677117, 0.020578814834790567, 0.015540614092277851, 0.010938954064442924] 
        #[0.11596216, 0.11355668, 0.11115119999999999, 0.10874571999999999, 0.10634024, 0.10393475999999999, 0.10152928, 0.0991238, 0.09671832, 0.09431284, 0.09190736, 0.08950187999999999, 0.08709639999999999, 0.08469092, 0.08228543999999999, 0.07987996, 0.07747448, 0.075069, 0.07266352, 0.07025804, 0.06785255999999999, 0.06544707999999999, 0.0630416, 0.06063612, 0.05823064, 0.05582516, 0.05341968, 0.051014199999999996, 0.048608719999999994, 0.04620323999999999, 0.04379775999999999] 
        #[0.2530835789154982, 0.23229112816295477, 0.21324918005934537, 0.19490844153432518, 0.1753194488650839, 0.15786190705943356, 0.14107078363560321, 0.12628669680278912, 0.11361509575847889, 0.10171719639788993, 0.0906049497657404, 0.0906049497657404, 0.0725047559562313, 0.06507485699181632, 0.05779767145772662, 0.051487401489072264, 0.045729431718621844, 0.04081156068027983, 0.036413525562759716, 0.036413525562759716, 0.02900351292602817, 0.02587179176960425, 0.02318697987928025, 0.02069408356698347, 0.01814312824437344, 0.015934040964647914, 0.015934040964647914, 0.012852018043340864, 0.011541953459308262, 0.010068060871985167, 0.008868148129312995]

#aX = array.array('d', X)
#aY = array.array('d', Xcurve)

smooth_2TeV=TGraphSmooth("normal")
#Graph = TGraph()
Graph_nonSmooth = TGraph()

for i in range(0,len(X)):
    #Graph.SetPoint(i,X[i], Xcurve_2TeV[i])
    Graph_nonSmooth.SetPoint(i,X[i], Xcurve_2TeV[i])

Graph = smooth_2TeV.SmoothSuper(Graph_nonSmooth,"linear",0,0.005)

Graph.SetLineWidth(2)
Graph.SetLineStyle(2)
Graph.SetLineColor(ROOT.kRed)

smooth_1TeV=TGraphSmooth("normal")

#Graph_1TeV = TGraph()
Graph_1TeV_nonSmooth = TGraph()

for i in range(0,len(X)):
    #Graph_1TeV.SetPoint(i,X[i], Xcurve_1TeV[i])
    Graph_1TeV_nonSmooth.SetPoint(i,X[i], Xcurve_1TeV[i])

Graph_1TeV = smooth_1TeV.SmoothSuper(Graph_1TeV_nonSmooth,"linear",0,0.005)
Graph_1TeV.SetLineWidth(2)
Graph_1TeV.SetLineStyle(2)
Graph_1TeV.SetLineColor(ROOT.kBlue)



if args.plot_0b:
    #tag = "singleBin_v1"
    tag = "singleBin_0b_v1"
    
if args.plot_1b:
    #tag = "singleBin_v1"
    tag = "singleBin_1b_v1"
prefix = "BSLL"

if args.mumu:
    config = "mumu_2LB"

if args.ee:
    config = "elel_2LB"
  
observedx=[]
observedy=[]
obsLimits={}

limits={}
expectedx=[]
expectedy=[]
expected1SigLow=[]
expected1SigHigh=[]
expected2SigLow=[]
expected2SigHigh=[]

X1 = numpy.arange(400, 1650, 50)

#for mass in X:
for mass in X1:
    obs = "cards/%s_limitCard_%s_Obs"%(prefix, config)
    exp = "cards/%s_limitCard_%s_Exp"%(prefix, config)
    #print(mass)
    mval = str(mass)
    #obs += "_m%s_%s_BSLL"%(mval, args.tag)
    #exp += "_m%s_%s_BSLL_1b.txt"%(mval, tag)
    exp += "_m%s_%s_BSLL.txt"%(mval, tag)

    #fileObs=open(obs,'r')
    fileExp=open(exp,'r')
     
    #print(exp)
    for entry in fileExp:
        #print(entry)
        massPoint = mass
        limitEntry=float(entry.split()[1])/137.24
        #print(limitEntry)
        if massPoint not in limits: 
            limits[massPoint]=[]
        limits[massPoint].append(limitEntry)

#for massPoint in X:
for massPoint in X1:

    limits[massPoint].sort()
    

    numLimits=len(limits[massPoint])
    nrExpts=len(limits[massPoint])
    medianNr=int(nrExpts*0.5)
            #get indexes:
    upper1Sig=int(nrExpts*(1-(1-0.68)*0.5))
    lower1Sig=int(nrExpts*(1-0.68)*0.5)
    upper2Sig=int(nrExpts*(1-(1-0.95)*0.5))
    lower2Sig=int(nrExpts*(1-0.95)*0.5)
    expectedx.append(massPoint)

    print(massPoint, limits[massPoint][upper2Sig])
    print(massPoint, limits[massPoint][upper1Sig])

    expectedy.append(limits[massPoint][medianNr])

    expected1SigLow.append(limits[massPoint][lower1Sig])
    expected1SigHigh.append(limits[massPoint][upper1Sig])
    expected2SigLow.append(limits[massPoint][lower2Sig])
    expected2SigHigh.append(limits[massPoint][upper2Sig])

    expX=numpy.array(expectedx)
    expY=numpy.array(expectedy)

values2=[]
xPointsForValues2=[]
values=[]
xPointsForValues=[]

for x in range (0,len(expectedx)):
    values2.append(expected2SigLow[x])
    xPointsForValues2.append(expectedx[x])
for x in range (len(expectedx)-1,0-1,-1):
    #if args.plot_1b:
    #    if expected2SigHigh[x] > 1:
    #   #print(expected2SigHigh[x])
    #        values2.append(expected2SigHigh[x])
            #values2.append(expected2SigHigh[x]/168.)
    #    else:
    #        values2.append(expected2SigHigh[x])
            
    #if args.plot_0b:
    #    values2.append(expected2SigHigh[x])
    values2.append(expected2SigHigh[x])
    xPointsForValues2.append(expectedx[x])
if printStats: print ("length of values2: ", len(values2))

for x in range (0,len(expectedx)):
    values.append(expected1SigLow[x])
    xPointsForValues.append(expectedx[x])
for x in range (len(expectedx)-1,0-1,-1):
    values.append(expected1SigHigh[x])
    xPointsForValues.append(expectedx[x])
if printStats: print ("length of values: ", len(values))

exp2Sig=numpy.array(values2)
xPoints2=numpy.array(xPointsForValues2)
exp1Sig=numpy.array(values)
xPoints=numpy.array(xPointsForValues)
if printStats: print ("xPoints2: ",xPoints2)
if printStats: print ("exp2Sig: ",exp2Sig)
if printStats: print ("xPoints: ",xPoints)
if printStats: print ("exp1Sig: ",exp1Sig)

xPointss = array.array('d', xPoints)
xPoints22 = array.array('d', xPoints2)
exp2Sigg = array.array('d', exp2Sig)

GraphErr2Sig=TGraphAsymmErrors(len(xPointss),xPoints22,exp2Sigg)

#smooth_2sig=TGraphSmooth("normal")

#GraphErr2Sig_nonSmooth=TGraphAsymmErrors(len(xPointss),xPoints22,exp2Sigg)
#GraphErr2Sig = smooth_2sig.SmoothSuper(GraphErr2Sig_nonSmooth,"linear",0,0.005)

GraphErr2Sig.SetFillColor(ROOT.kYellow)
#GraphErr2Sig.SetFillColor(ROOT.kOrange)

exp1Sigg = array.array('d', exp1Sig)

GraphErr1Sig=TGraphAsymmErrors(len(xPointss),xPointss,exp1Sigg)

#smooth_1sig=TGraphSmooth("normal")
#GraphErr1Sig_nonSmooth = TGraphAsymmErrors(len(xPointss),xPointss,exp1Sigg)
#GraphErr1Sig = smooth_1sig.SmoothSuper(GraphErr1Sig_nonSmooth,"linear",0,0.005)

GraphErr1Sig.SetFillColor(ROOT.kGreen)
#GraphErr1Sig.SetFillColor(ROOT.kGreen+1)

cCL=TCanvas("cCL", "cCL",0,0,800,500)
gStyle.SetOptStat(0)

expX=numpy.array(expectedx)
expY=numpy.array(expectedy)
#print("expX: {0}".format(expX))
expXX = array.array('d', expX)
expYY = array.array('d', expY)

#GraphExp=TGraph(len(expXX),expXX,expYY)

smooth_exp=TGraphSmooth("normal")
GraphExp_nonSmooth=TGraph(len(expXX),expXX,expYY)
GraphExp = smooth_exp.SmoothSuper(GraphExp_nonSmooth,"linear",0,0.005)

GraphExp.SetLineWidth(3)
GraphExp.SetLineStyle(2)
GraphExp.SetLineColor(ROOT.kBlack)

plotPad = ROOT.TPad("plotPad","plotPad",0,0,1,1)
plotPad.Draw()	
plotPad.cd()


plotPad.SetLogy()

DummyGraph=TH1F("DummyGraph","",100,500,1600)
#DummyGraph=TH1F("DummyGraph","",100,500,1900)

if args.mumu:
    DummyGraph.GetXaxis().SetTitle("m_{#mu#mu}^{min} [GeV]")

if args.ee:
    DummyGraph.GetXaxis().SetTitle("m_{ee}^{min} [GeV]")

DummyGraph.GetYaxis().SetTitle("#sigma_{vis} [fb]")


#DummyGraph.GetYaxis().SetTitle("#sigma({0})".format(yaxis_title_chan) + " #times #it{#Beta} [pb]")

gStyle.SetOptStat(0)
DummyGraph.GetXaxis().SetRangeUser(400,1600)
#DummyGraph.GetXaxis().SetRangeUser(400,1900)

DummyGraph.SetMinimum(5e-3)
DummyGraph.SetMaximum(1e4)
DummyGraph.GetXaxis().SetLabelSize(0.04)
DummyGraph.GetXaxis().SetTitleSize(0.045)
DummyGraph.GetXaxis().SetTitleOffset(1.)
DummyGraph.GetYaxis().SetLabelSize(0.04)

DummyGraph.GetYaxis().SetTitleSize(0.045)
DummyGraph.GetYaxis().SetTitleOffset(1.)
DummyGraph.Draw()

GraphErr2Sig.Draw("F")
GraphErr1Sig.Draw("F")
GraphExp.Draw("lpsame")


cCL.SetTickx(1)
cCL.SetTicky(1)
cCL.RedrawAxis()
cCL.Update()

plotPad.RedrawAxis()
plotPad.SetTickx() # set tickes on both sides of the axis
plotPad.SetTicky() # set tickes on both sides of the axis

Graph.Draw("same C2")
Graph_1TeV.Draw("same C2")

x1 = 0.60
x2 = x1 + 0.23
y2 = 0.86
y1 = 0.60
leg = TLegend(x1,y1,x2,y2)
leg.SetFillStyle(0)
leg.SetBorderSize(0)
leg.SetTextSize(0.041)
leg.SetTextFont(42)

leg.AddEntry(GraphExp, "Expected",'L')
leg.AddEntry(GraphErr1Sig,"#pm1#sigma","f")
leg.AddEntry(GraphErr2Sig,"#pm2#sigma","f")
leg.AddEntry(Graph_1TeV ,"Theory (#Lambda = 1 TeV)","l")
leg.AddEntry(Graph,"Theory (#Lambda = 2 TeV)","l")
leg.Draw("hist")

plCMS=TPaveLabel(.13,.81,.25,.88,"CMS","NBNDC")
plCMS.SetTextAlign(12)
plCMS.SetTextFont(62)
plCMS.SetFillColor(0)
plCMS.SetFillStyle(0)
plCMS.SetBorderSize(0)

plCMS.Draw()

plPrelim=TPaveLabel(.13,.76,.275,.82,"Preliminary","NBNDC")
plPrelim.SetTextSize(0.6)
plPrelim.SetTextAlign(12)
plPrelim.SetTextFont(52)
plPrelim.SetFillColor(0)
plPrelim.SetFillStyle(0)
plPrelim.SetBorderSize(0)
plPrelim.Draw()

if args.ee:
    if args.plot_0b:
        plCat=TPaveLabel(.13,.69,.25,.73,"ee + 0b category","NBNDC")
    if args.plot_1b:
        plCat=TPaveLabel(.13,.69,.25,.73,"ee + 1b category","NBNDC")

if args.mumu:
    if args.plot_0b:
        plCat=TPaveLabel(.13,.69,.25,.73,"#mu#mu + 0b category","NBNDC")
    if args.plot_1b:
        plCat=TPaveLabel(.13,.69,.25,.73,"#mu#mu + 1b category","NBNDC")

plCat.SetTextSize(1.1)
plCat.SetTextAlign(12)
plCat.SetTextFont(42)
plCat.SetFillColor(0)
plCat.SetFillStyle(0)
plCat.SetBorderSize(0)

plCat.Draw()


plLumi=TPaveLabel(.65,.901,.9,.99,"138 fb^{-1} (13 TeV)","NBNDC")
plLumi.SetTextSize(0.5)
plLumi.SetTextFont(42)
plLumi.SetFillColor(0)
plLumi.SetBorderSize(0)
plLumi.Draw()


cCL.Update()

if args.mumu and args.plot_0b:
    output = "singleBin_0b_mumu"

if args.mumu and args.plot_1b:
    output = "singleBin_1b_mumu"

if args.ee and args.plot_0b:
    output = "singleBin_0b_ee"

if args.ee and args.plot_1b:
    output = "singleBin_1b_ee"

printPlots(cCL,output)


